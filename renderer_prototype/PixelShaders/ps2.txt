sampler s0 : register(s0); 

static const float     halfpi     = 1.5707963267948966192313216916398;
static const float         pi     = 3.1415926535897932384626433832795;
static const float2 ps = {1/2048.0, 1/1024.0};

struct VERTEX_STUFF_W // color
{
  float4  coord : POSITION;
  float2  CT   : TEXCOORD0;
};

VERTEX_STUFF_W S_VERTEX (float3 p : POSITION, float2 tc : TEXCOORD0)
{
  VERTEX_STUFF_W OUT = (VERTEX_STUFF_W)0;

  OUT.coord = float4(p,1);
  OUT.CT = tc;
  return OUT;
}

float l(float x)
{ 
  if (x==0.0) return pi*halfpi;
  else
  return sin(x*halfpi)*sin(x*pi)/(x*x);
}

float4 lanczos(float2 tex : TEXCOORD0) : COLOR
{
float2 CT = tex;
	
  float2 crd[4][4];
  float4 pix[4][4];

  float2 dx = {ps.x,0.0};
  float2 dy = {0.0,ps.y};
  
  float2 pixcoord  =  float2(tex.x*2048, tex.y*1024);//CT/ps;
  float2 fract     = frac(pixcoord);
  float2 coord0    = CT-(fract)*ps;
  
// calculating coordinates for 16 texels  
  crd[0][0]=coord0-ps;    crd[1][0]=crd[0][0]+dx; 
  crd[2][0]=crd[1][0]+dx; crd[3][0]=crd[2][0]+dx;
  crd[0][1]=crd[0][0]+dy; crd[1][1]=crd[0][1]+dx; 
  crd[2][1]=crd[1][1]+dx; crd[3][1]=crd[2][1]+dx;
  crd[0][2]=crd[0][1]+dy; crd[1][2]=crd[0][2]+dx; 
  crd[2][2]=crd[1][2]+dx; crd[3][2]=crd[2][2]+dx;
  crd[0][3]=crd[0][2]+dy; crd[1][3]=crd[0][3]+dx; 
  crd[2][3]=crd[1][3]+dx; crd[3][3]=crd[2][3]+dx; 


// calculating texel weights

  float a,b,c,d,p,q,r,s;

  a = l(1+fract.x); 
  b = l(  fract.x); 
  c = l(1-fract.x); 
  d = l(2-fract.x);

  p = l(1+fract.y); 
  q = l(  fract.y); 
  r = l(1-fract.y); 
  s = l(2-fract.y);


// reading the texels

  pix[0][0] = tex2D(s0,crd[0][0]);
  pix[1][0] = tex2D(s0,crd[1][0]);
  pix[2][0] = tex2D(s0,crd[2][0]);
  pix[3][0] = tex2D(s0,crd[3][0]);
  pix[0][1] = tex2D(s0,crd[0][1]);
  pix[1][1] = tex2D(s0,crd[1][1]);
  pix[2][1] = tex2D(s0,crd[2][1]);
  pix[3][1] = tex2D(s0,crd[3][1]);
  pix[0][2] = tex2D(s0,crd[0][2]);
  pix[1][2] = tex2D(s0,crd[1][2]);
  pix[2][2] = tex2D(s0,crd[2][2]);
  pix[3][2] = tex2D(s0,crd[3][2]);
  pix[0][3] = tex2D(s0,crd[0][3]);
  pix[1][3] = tex2D(s0,crd[1][3]);
  pix[2][3] = tex2D(s0,crd[2][3]);
  pix[3][3] = tex2D(s0,crd[3][3]);


// applying weights

  pix[0][0] = (-pix[0][0]*a+pix[1][0]*b+pix[2][0]*c-pix[3][0]*d)*p;
  pix[0][1] = ( pix[0][1]*a+pix[1][1]*b+pix[2][1]*c+pix[3][1]*d)*q;
  pix[0][2] = ( pix[0][2]*a+pix[1][2]*b+pix[2][2]*c+pix[3][2]*d)*r;
  pix[0][3] = (-pix[0][3]*a+pix[1][3]*b+pix[2][3]*c-pix[3][3]*d)*s;


// final sum and weight normalization
  
  return float4((pix[0][0]+pix[0][1]+pix[0][2]+pix[0][3])/((a+b+c+d)*(p+q+r+s)-2*(a+d)*(p+s)));

}

#define scan_step 15
#define scan_step2 5
#define scan_range 0.03

#define dx (scan_range/scan_step)
#define dx2 (scan_range/scan_step2)



/*
float mydis(float4 c1, float4 c2)
{
	float d0 = distance(c1[0], c2[0]) / c1[0];
	float d1 = distance(c1[1], c2[1]) / c1[1];
	float d2 = distance(c1[2], c2[2]) / c1[2];
	float d3 = distance(c1[3], c2[3]) / c1[3];
	return max(max(d0,d1), max(d2,d3));
}
*/

float4 sbs(float2 tex : TEXCOORD0) : COLOR
{
	tex.x /= 2;
	float4 l = tex2D(s0, tex);

	float dis = 99.0;
	
	for(int i = -scan_step; i<= scan_step; i++)
	{
		float2 tex2 = {tex.x + 0.5 + dx* i, tex.y};
		float dis_c = distance(l, tex2D(s0, tex2));
		dis = min(dis_c, dis);
	}
	
	return dis;
}

float4 tb(float2 tex : TEXCOORD0) : COLOR
{
	tex.y /= 2;
	float4 l = tex2D(s0, tex);

	float dis = 99.0;
	
	for(int i = -scan_step; i<= scan_step; i++)
	{
		float2 tex2 = {tex.x + dx* i, 0.5 + tex.y};		
		float dis_c = distance(l, tex2D(s0, tex2));
		dis = min(dis_c, dis);
	}
	
	return dis;
}


float4 sbs2(float2 tex : TEXCOORD0) : COLOR
{
	tex.x /= 2;
	float4 l = tex2D(s0, tex);

	float dis = 99.0;
	
	for(int i = -scan_step2; i< scan_step2; i++)
	{
		float2 tex2 = {tex.x + 0.5 + dx2* i, tex.y};
		float dis_c = distance(l, tex2D(s0, tex2));
		dis = min(dis_c, dis);
	}
	
	return dis;
}

float4 tb2(float2 tex : TEXCOORD0) : COLOR
{
	tex.y /= 2;
	float4 l = tex2D(s0, tex);

	float dis = 99.0;
	
	for(int i = -scan_step2; i< scan_step2; i++)
	{
		float2 tex2 = {tex.x + dx2* i, 0.5 + tex.y};		
		float dis_c = distance(l, tex2D(s0, tex2));
		dis = min(dis_c, dis);
	}
	
	return dis;
}

float4 t2d(float2 tex)
{
	tex.y *= 0.6;
	tex.y += 0.2;
	return tex2D(s0, tex);
}

float4 mono(float2 tex : TEXCOORD0) : COLOR
{
	tex.y /= 2;
	float4 l = t2d(tex);

	float dis = 99.0;
	
	for(int i = -scan_step; i<= scan_step; i++)
	{
		float2 tex2 = {tex.x + dx* i, 0.5 + tex.y};
		float dis_c = distance(l, t2d(tex2));
		dis = min(dis_c, dis);
	}
	
	return dis;
}

float4 main(float2 tex : TEXCOORD0) : COLOR
{
	if (tex.x < 0.5)
	{
		tex.x *= 2;
		return sbs(tex);
	}
	else
	{
		tex.x -= 0.5;
		tex.x *= 2;
		return tb(tex);
	}
}