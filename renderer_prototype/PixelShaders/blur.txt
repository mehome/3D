sampler s0 : register(s0);
//float4 p0 : register(c0);

//#define width (p0[0])
//#define height (p0[1])
#define width 2048
#define height 1024

#define val0 (1.0)
#define val1 (0.125) 

#define effect_width (0.5)

float4 bmp_blur(float2 tex : TEXCOORD0) : COLOR
{	
	float dx = 0.0f;
	float dy = 0.0f;
 	float fTap = effect_width;

	float4 cAccum = tex2D(s0, tex) * val0;

	for ( int iDx = 0 ; iDx < 16; ++iDx )
	{
		dx = fTap /width; 
	    dy = fTap /height;

		cAccum += tex2D(s0, tex + float2(-dx,-dy)) * val1;
		cAccum += tex2D(s0, tex + float2(0,-dy)) * val1;
		cAccum += tex2D(s0, tex + float2(-dx,0)) * val1;
		cAccum += tex2D(s0, tex + float2(dx,0)) * val1;
		cAccum += tex2D(s0, tex + float2(0,dy)) * val1;
		cAccum += tex2D(s0, tex + float2(dx,dy)) * val1;
		cAccum += tex2D(s0, tex + float2(-dx,+dy)) * val1;
		cAccum += tex2D(s0, tex + float2(+dx,-dy)) * val1;
   
		fTap  += 0.1f;
	}
//	return(float4(1,1,1,1) - cAccum/16.0f);

//	return float4(0.5,1,1,0.5);	
	return float4(0,0,0,cAccum.a/16.0f);
}

float4 bmp_blur2(float2 tex : TEXCOORD0) : COLOR
{
	return float4(0, 0, 0, tex2D(s0, tex).a);
}