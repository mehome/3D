// warning: texture size is not handled correctly (if width != height)

static const float     halfpi     = 1.5707963267948966192313216916398;
static const float         pi     = 3.1415926535897932384626433832795;
sampler s0 : register(s0);
sampler s1 : register(s1);
float4 p0 : register(c0);
float4 p1 : register(c1);
float4 p2 : register(c2);

#define rate_x (p0[0])
#define rate_y (p0[1])
#define TEXTURE_WIDTH p0[2]
#define TEXTURE_HEIGHT p0[3]
#define TEXTURE_WIDTH_UV p1[0]
#define TEXTURE_HEIGHT_UV p1[1]
#define rate_x_UV (p1[2])
#define rate_y_UV (p1[3])
#define additional_alpha (p2[0])

#define lobe 4
#define tap lanczos_kernerl
float a = 4.0;


float4 yuv2rgb(float4 yuv)
{
	yuv.r -= 16.0/255.0;
	yuv.g -= 128.0/255.0;
	yuv.b -= 128.0/255.0;
//		Y' , V, U
// R
// G
// B


// // BT.601 in avisynth
//     R'= Y' + 0.000*U' + 1.402*V'
//     G'= Y' - 0.344*U' - 0.714*V'
//     B'= Y' + 1.772*U' + 0.000*V'			

// 	float4x4 coeffs2=
// 	{
// 		 1.164, 0.000, 1.596, 0.000,		// with Y' adjust to [16,235], UV adjust to [16,240]
// 		 1.164,-0.391,-0.813, 0.000,
// 		 1.164, 2.018, 0.000, 0.000,
// 		 0.000, 0.000, 0.000, 1.000
// 	};

// BT.709 in avisynth
//     R'= Y' + 0.0000*Cb + 1.5750*Cr
//     G'= Y' - 0.1870*Cb - 0.4678*Cr
//     B'= Y' + 1.8558*Cb + 0.0000*Cr

	float4x4 coeffs2=
	{
		 1.1644, 0.0000, 1.7930, 0.0000,
		 1.1644,-0.2129,-0.5325, 0.0000,
		 1.1644, 2.1126, 0.0000, 0.0000,
		 0.0000, 0.0000, 0.0000, 1.0000
	};

	
	return (mul(coeffs2,yuv));
}


float lanczos_kernerl(float x)
{	
 	if (abs(x) >= lobe)
 		return 0;
 		
 	if (abs(x) <= 0.00001f)
 		return pi*pi;
	
	return lobe*sin(pi*x)*sin(pi*x/lobe)/x/x;
}


float4 PaddedTex2D(sampler s, float2 tex)
{
	tex.x = clamp(tex.x, 0, 1);
	tex.y = clamp(tex.y, 0, 1);
	
	return tex2D(s, tex);
}


float4 lanczosXCore(sampler s, float2 tex, float2 ps, float rate)
{
  // assume Y coordinate is pixel perfect
  // so we only calculate X pixels	
  float2 dx = {ps.x,0.0};
  float2 dy = {0.0,ps.y};  
  
  float pixcoord = ((tex.x - ps.x/2) / ps.x + 0.5);
  float2 coord0 = {floor(pixcoord)*ps.x + ps.x/2, tex.y };
  
  float2 fract = {frac(pixcoord),0};
    
  float total_weight = 0;
  float4 total_color = 0;
  for (int x=-lobe; x<=lobe; x++)
  {
	float xx = fract.x - x;
	float yy = fract.y;
	float weight =  tap(xx*rate)*tap(yy);
	
	float4 color = PaddedTex2D(s, coord0 + x*dx);
	total_weight += weight;
	total_color += weight * color;
  }
  
  return total_color/total_weight;  
}

float4 lanczosX(float2 tex : TEXCOORD0) : COLOR
{
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	return lanczosXCore(s0, tex, ps, rate_x);
}

float4 lanczosX_YV12(float2 tex : TEXCOORD0) : COLOR
{
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};	
	float Y = lanczosXCore(s0, tex, ps, rate_x)[0];
	
	ps.x *= 2;
	float2 tex_V = {tex.x, tex.y/2};
	float2 tex_U = {tex.x, tex.y/2+0.5};
	
	float V = lanczosXCore(s1, tex_V, ps, rate_x_UV)[0];
	float U = lanczosXCore(s1, tex_U, ps, rate_x_UV)[0];
	
	return yuv2rgb(float4(Y,U,V,1));
}

float4 lanczosX_NV12(float2 tex : TEXCOORD0) : COLOR
{
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	float Y = lanczosXCore(s0, tex, ps, rate_x)[0];
	
	ps *= 2;
	float4 UV = lanczosXCore(s1, tex, ps, rate_x_UV);
	
	return yuv2rgb(float4(Y,UV[0],UV[3],1));
}

float4 lanczosX_P016(float2 tex : TEXCOORD0) : COLOR
{
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	float Y = lanczosXCore(s0, tex, ps, rate_x)[0];
	
	ps *= 2;
	float4 UV = lanczosXCore(s1, tex, ps, rate_x_UV);
	
	return yuv2rgb(float4(Y,UV.r,UV.g,1));
}

float4 lanczosY(float2 tex : TEXCOORD0) : COLOR
{
  // assume Y coordinate is pixel perfect
  // so we only calculate X pixels
  float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	
  float2 dx = {ps.x,0.0};
  float2 dy = {0.0,ps.y};  
  
  float pixcoord = ((tex.y - 0.5/TEXTURE_HEIGHT) * TEXTURE_HEIGHT + 0.5);
  float2 coord0 = {tex.x, floor(pixcoord)/TEXTURE_HEIGHT + 0.5/TEXTURE_HEIGHT };
  
  float2 fract = {0, frac(pixcoord)};
    
  float total_weight = 0;
  float4 total_color = 0;
  for (int y=-lobe; y<=lobe; y++)
  {
	float xx = fract.x;
	float yy = fract.y - y;
	float weight =  tap(xx)*tap(yy*rate_y);
	
	float4 color = PaddedTex2D(s0, coord0 + y*dy);
	total_weight += weight;
	total_color += weight * color;
  }
  
  return total_color/total_weight * additional_alpha;
}

float4 lanczosCore(sampler s, float2 tex, float2 ps, float2 rates)
{
  float2 dx = {ps.x,0.0};
  float2 dy = {0.0,ps.y};
  
  float2 pixcoord  = {tex.x/ps.x, tex.y/ps.y};
  float2 fract     = frac(pixcoord);
  float2 coord0    = tex-float2(fract.x*ps.x, fract.y*ps.y);
  coord0 -= ps/2;
  
  
  float total_weight = 0;
  float4 total_color = 0;
  for (int x=-lobe; x<=lobe; x++)
  for (int y=-lobe; y<=lobe; y++)
  {
	float xx = fract.x - x;
	float yy = fract.y - y;
	float weight =  tap(xx*rates.x)*tap(yy*rates.y);
	
	total_weight += weight;
	float4 color = PaddedTex2D(s, coord0 + x*dx + y*dy);
	total_color += weight * color;
  }
  
  return total_color/total_weight;  
}

float4 lanczos(float2 tex : TEXCOORD0) : COLOR
{
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	float2 rates = {rate_x, rate_y};
	return lanczosCore(s0, tex, ps, rates) * additional_alpha;
}

float4 lanczos_YV12(float2 tex : TEXCOORD0) : COLOR
{
	float2 rates = {rate_x, rate_y};
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};	
	float Y = lanczosCore(s0, tex, ps, rates)[0];
	
	ps.x *= 2;
	rates = clamp(rates*2, 0, 1);
	float2 tex_V = {tex.x, tex.y/2};
	float2 tex_U = {tex.x, tex.y/2+0.5};
	
	float V = lanczosCore(s1, tex_V, ps, rates)[0];
	float U = lanczosCore(s1, tex_U, ps, rates)[0];
	
	return yuv2rgb(float4(Y,U,V,1)) * additional_alpha;
}

float4 lanczos_NV12(float2 tex : TEXCOORD0) : COLOR
{
	float2 rates = {rate_x, rate_y};
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	float Y = lanczosXCore(s0, tex, ps, rates)[0];
	
	ps *= 2;	
	rates = clamp(rates*2, 0, 1);
	float4 UV = lanczosCore(s1, tex, ps, rates);
	
	return yuv2rgb(float4(Y,UV[0],UV[3],1)) * additional_alpha;
}
float4 lanczos_P016(float2 tex : TEXCOORD0) : COLOR
{
	float2 rates = {rate_x, rate_y};
	float2 ps = {1.0/TEXTURE_WIDTH, 1.0/TEXTURE_HEIGHT};
	float Y = lanczosXCore(s0, tex, ps, rates)[0];
	
	ps *= 2;	
	rates = clamp(rates*2, 0, 1);
	float4 UV = lanczosCore(s1, tex, ps, rates);
	
	return yuv2rgb(float4(Y,UV.r,UV.g,1)) * additional_alpha;
}