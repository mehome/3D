#pragma  once
#include <Windows.h>
#include <atlbase.h>
#include <dshow.h>

//definitions
#define AmHresultFromWin32(x) (MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, x))

// GUIDs
DEFINE_GUID(CLSID_HaaliSimple, 0x8F43B7D9, 0x9D6B, 0x4F48, 0xBE, 0x18, 0x4D, 0x78, 0x7C, 0x79, 0x5E, 0xEA);
DEFINE_GUID(CLSID_E3DSource, 0x0A68C3B5, 0x9164, 0x4A54, 0xAF, 0xAF, 0x99, 0x5B, 0x2F, 0xF0, 0xE0, 0xD4);
DEFINE_GUID(CLSID_PD10_DEMUXER, 0xF07E981B, 0x0EC4, 0x4665, 0xA6, 0x71, 0xC2, 0x49, 0x55, 0xD1, 0x1A, 0x38);
DEFINE_GUID(CLSID_PD10_DECODER, 0xD00E73D7, 0x06f5, 0x44F9, 0x8B, 0xE4, 0xB7, 0xDB, 0x19, 0x1E, 0x9E, 0x7E);
DEFINE_GUID(CLSID_3dvSource, 0xfbcfd6af, 0xb25f, 0x4a6d, 0xae, 0x56, 0x5b, 0x53, 0x3, 0xf1, 0xa4, 0xe);
DEFINE_GUID(MEDIATYPE_Subtitle, 0xe487eb08, 0x6b26, 0x4be9, 0x9d, 0xd3, 0x99, 0x34, 0x34, 0xd3, 0x13, 0xfd);
DEFINE_GUID(MEDIASUBTYPE_UTF8, 0x87c0b230, 0x3a8, 0x4fdf, 0x80, 0x10, 0xb2, 0x7a, 0x58, 0x48, 0x20, 0xd);
DEFINE_GUID(MEDIASUBTYPE_PGS, 0x4eba53e, 0x9330, 0x436c, 0x91, 0x33, 0x55, 0x3e, 0xc8, 0x70, 0x31, 0xdc);
static const GUID CLSID_SSIFSource = { 0x916e4c8d, 0xe37f, 0x4fd4, { 0x95, 0xf6, 0xa4, 0x4e, 0x51, 0x46, 0x2e, 0xdf } };
static const GUID CLSID_my12doomSource = { 0x8FD7B1DE, 0x3B84, 0x4817, { 0xA9, 0x6F, 0x4C, 0x94, 0x72, 0x8B, 0x1A, 0xAE } };
DEFINE_GUID(CLSID_CoreAVC, 0x09571A4B, 0xF1FE, 0x4C60, 0x97, 0x60, 0xDE, 0x6D, 0x31, 0x0C, 0x7C, 0x31);
DEFINE_GUID(CLSID_LAVAudio, 0xe8e73b6b, 0x4cb3, 0x44a4, 0xbe, 0x99, 0x4f, 0x7b, 0xcb, 0x96, 0xe4, 0x91);
DEFINE_GUID(CLSID_XvidDecoder, 0x64697678, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(CLSID_DivxDecoder, 0x78766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// funcs
HRESULT get_monitors_rect(RECT *screen1, RECT *screen2);
bool open_file_dlg(wchar_t *pathname, HWND hDlg, wchar_t *filter = NULL);
bool select_color(DWORD *color, HWND parent);
bool browse_folder(wchar_t *out, HWND owner = NULL);
HRESULT RemoveDownstream(CComPtr<IPin> &input_pin);
HRESULT find_main_movie(const wchar_t *folder, wchar_t *out);
HRESULT GetUnconnectedPin(IBaseFilter *pFilter,PIN_DIRECTION PinDir, IPin **ppPin);
HRESULT GetConnectedPin(IBaseFilter *pFilter,PIN_DIRECTION PinDir, IPin **ppPin);
HRESULT RemoveUselessFilters(IGraphBuilder *gb);
HRESULT DeterminPin(IPin *pin, wchar_t *name = NULL, CLSID majortype = CLSID_NULL);
HRESULT GetPinByName(IBaseFilter *pFilter, PIN_DIRECTION PinDir, const wchar_t *name, IPin **ppPin);

// localization
typedef enum{ENGLISH, CHINESE} localization_language;
extern localization_language g_active_language;
wchar_t *C(const wchar_t *English);
HRESULT add_localization(const wchar_t *English, const wchar_t *Localized = NULL);
HRESULT set_localization_language(localization_language language);
HRESULT localize_menu(HMENU menu);

// CoreMVC
HRESULT ActiveCoreMVC(IBaseFilter *decoder);
HRESULT beforeCreateCoreMVC();
