#include <stdio.h>
#include <tchar.h>
#include <conio.h>
#include <math.h>
#include <atlbase.h>
#include "windows.h"
#include "avisynth.h"
#include "resource.h"
#include "screenshotor.h"

HRESULT do_capture(const wchar_t*video, const wchar_t*bmp, int w_count, int h_count, bool showtime, int re_w, int re_h, wchar_t *msg, HWND cb, double transparancy);
HRESULT save_bitmap(DWORD *data, const wchar_t *filename, int width, int height);
INT_PTR CALLBACK window_proc( HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam );
bool open_file_dlg(wchar_t *pathname, HWND hDlg, bool do_open  = true, wchar_t *filter = NULL);

wchar_t apppath[1024] = L"";
wchar_t jdopath[1024] = L"";


class myFFSource: public IClip
{
public:
	myFFSource(const wchar_t *filename, IScriptEnvironment *env);
	~myFFSource();

	// avisynth virtual functions
	bool __stdcall GetParity(int n){return false;}
	const VideoInfo& __stdcall GetVideoInfo(){return vi;}
	void __stdcall SetCacheHints(int cachehints,int frame_range) {};

	// key function
	PVideoFrame __stdcall GetFrame(int n, IScriptEnvironment* env);
	void __stdcall GetAudio(void* buf, __int64 start, __int64 count, IScriptEnvironment* env){}

	screenshoter s;
	VideoInfo vi;
	int last_frame/* = -999*/;
};

myFFSource::myFFSource(const wchar_t *filename, IScriptEnvironment *env)
:last_frame(-999)
{
	if (s.open_file(filename) < 0)
		env->ThrowError("Unsupported file");

	s.set_out_format(PIX_FMT_YUV420P, s.m_width, s.m_height);

	memset(&vi, 0, sizeof(vi));
	vi.width = s.m_width;
	vi.height = s.m_height;
	vi.fps_numerator = 24;		// fps is irrelevant
	vi.fps_denominator = 1;
	vi.num_frames = (int)(s.m_duration * vi.fps_numerator / vi.fps_denominator);		
	vi.pixel_type = VideoInfo::CS_I420;
}

myFFSource::~myFFSource()
{

}

PVideoFrame myFFSource::GetFrame(int n, IScriptEnvironment* env)
{
	PVideoFrame dst = env->NewVideoFrame(vi);

	if (last_frame != n - 1)
		s.seek(1000 * n * vi.fps_denominator / vi.fps_numerator);

	last_frame = n;

	if (s.get_one_frame(dst->GetWritePtr(), dst->GetPitch()) < 0)
		memset(dst->GetWritePtr(), 0, dst->GetPitch() * vi.height * 3 / 2);

	return dst;
}

int wmain(int argc, const wchar_t* argv[])
{
	return WinMain(0, 0, 0, 0);
}

int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	GetModuleFileNameW(NULL, apppath, 1024);
	for(int i=wcslen(apppath); i>=0; i--)
		if (apppath[i] == L'\\')
		{
			apppath[i] = NULL;
			break;
		}
	wcscpy(jdopath, apppath);
	wcscat(jdopath, L"\\jdo.exe");

	// Extract jdo.exe
	HMODULE hm = GetModuleHandle(NULL);
	HRSRC hResInfo = FindResource(hm, MAKEINTRESOURCE(IDR_JDO), RT_RCDATA);
	HGLOBAL hDllData = LoadResource(hm, hResInfo);
	int res_size = SizeofResource(hm, hResInfo);
	void * dll_data = LockResource(hDllData);
	if (!dll_data)
	{
		MessageBoxA(NULL, "jdo.exe in AvsSlideShow.exe corrupted.", "Error", MB_ICONERROR);
		return -1;
	}
	FILE * f = _wfopen(jdopath, L"wb");
	if (!f)
	{
		MessageBoxA(NULL, "failed writing jdo.exe", "Error", MB_ICONERROR);
		return -1;
	}
	else
	{
		fwrite(dll_data, 1, res_size, f);
		fclose(f);
	}


	DialogBoxW(NULL, MAKEINTRESOURCEW(IDD_DIALOG1), NULL, window_proc);
	TerminateProcess(GetCurrentProcess(), 0);
}

bool is_avs(const wchar_t *file)
{
	int len = wcslen(file);
	wchar_t tmp[1024];
	wcscpy(tmp, file + len - 3);
	for(int i=0; i<3; i++)
		tmp[i] = towlower(tmp[i]);

	return wcscmp(tmp, L"avs") == 0;
}

bool is_ts(const wchar_t *file)
{
	int len = wcslen(file);
	wchar_t tmp[1024];
	wcscpy(tmp, file + len - 3);
	for(int i=0; i<3; i++)
		tmp[i] = towlower(tmp[i]);

	return wcsstr(tmp, L"ts") != NULL;
}
INT_PTR CALLBACK window_proc( HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam )
{
	switch( msg ) 
	{
	case WM_COMMAND:
		{
			int id = LOWORD(wParam);
			if ( id == IDC_VIDEO_BROWSE)
			{
				wchar_t tmp[1024] = L"";
				if (open_file_dlg(tmp, hDlg))
				{

				SetDlgItemTextW(hDlg, IDC_VIDEO, tmp);

				wcscat(tmp, L".bmp");
				SetDlgItemTextW(hDlg, IDC_BMP, tmp);
				}

			}
			else if (id == IDC_BMP_BROWSE)
			{
				wchar_t tmp[1024] = L"";
				if (open_file_dlg(tmp, hDlg, false, L"BMP Files\0*.bmp\0\0"))
					SetDlgItemTextW(hDlg, IDC_BMP, tmp);
			}

			else if (id == IDC_GO)
			{
				wchar_t tmp[1024];
				wchar_t video[1024];
				wchar_t bmp[1024];
				wchar_t jpg[1024];
				wchar_t cmd[1024];
				GetDlgItemTextW(hDlg, IDC_W_COUNT, tmp, 1024);
				int w_count = _wtoi(tmp);
				GetDlgItemTextW(hDlg, IDC_H_COUNT, tmp, 1024);
				int h_count = _wtoi(tmp);

				GetDlgItemTextW(hDlg, IDC_RESIZE_W, tmp, 1024);
				int re_w = _wtoi(tmp);
				GetDlgItemTextW(hDlg, IDC_RESIZE_H, tmp, 1024);
				int re_h = _wtoi(tmp);
				GetDlgItemTextW(hDlg, IDC_TRANS, tmp, 1024);
				double trans = (double)_wtoi(tmp) / 100;
				GetDlgItemTextW(hDlg, IDC_VIDEO, video, 1024);
				GetDlgItemTextW(hDlg, IDC_BMP, bmp, 1024);
				wcscpy(jpg, bmp);
				wcscat(jpg, L".jpg");
				wsprintfW(cmd, L"-q 85 -d -ssv \"%s\"", bmp);
				wprintf(cmd);

				bool showtime = SendMessage(GetDlgItem(hDlg, IDC_SHOWTIME), BM_GETCHECK, FALSE, 0);

				HRESULT hr = do_capture(video, bmp, w_count, h_count, showtime, re_w, re_h, tmp, hDlg, trans);

				if (FAILED(hr))
					MessageBoxW(hDlg, tmp, L"ERROR", MB_ICONERROR);
				else
				{
					ShellExecuteW(hDlg, L"open", bmp, NULL, NULL, SW_SHOW);
					ShellExecuteW(NULL, NULL, jdopath, cmd, NULL, SW_HIDE);
				}
			}

		}
		break;

	case WM_DROPFILES:
		{
			HDROP hDropInfo = (HDROP)wParam;
			int count = DragQueryFile(hDropInfo, (UINT)-1, NULL, 0);
			if (count>0)
			{
				wchar_t **filenames = (wchar_t**)malloc(sizeof(wchar_t*)*count);
				for(int i=0; i<count; i++)
				{
					filenames[i] = (wchar_t*)malloc(sizeof(wchar_t) * MAX_PATH);
					DragQueryFileW(hDropInfo, 0, filenames[i], MAX_PATH);
				}
				SetDlgItemTextW(hDlg, IDC_VIDEO, filenames[0]);
				wcscat(filenames[0], L".bmp");
				SetDlgItemTextW(hDlg, IDC_BMP, filenames[0]);

				for(int i=0; i<count; i++) free(filenames[i]);
				free(filenames);
			}

		}

	case WM_INITDIALOG:
		{
			SendMessage(GetDlgItem(hDlg, IDC_SHOWTIME), BM_SETCHECK, FALSE, 0);
			SetDlgItemTextW(hDlg, IDC_W_COUNT, L"1");
			SetDlgItemTextW(hDlg, IDC_H_COUNT, L"6");
			SetDlgItemTextW(hDlg, IDC_RESIZE_W, L"800");
			SetDlgItemTextW(hDlg, IDC_RESIZE_H, L"240");
			SetDlgItemTextW(hDlg, IDC_TRANS, L"50");
		}
		break;

	case WM_CLOSE:
		EndDialog(hDlg, 0);
		break;

	default:
		return FALSE;
	}

	return TRUE; // Handled message
}
HRESULT do_capture(const wchar_t*video, const wchar_t*bmp, int w_count, int h_count, bool showtime, int re_w, int re_h, wchar_t *msg, HWND cb, double transparancy)
{
	USES_CONVERSION;
	char tmp[1024];
	try 
	{
		HMODULE avsdll = LoadLibrary(_T("avisynth.dll"));
		if(!avsdll)
		{wcscpy(msg, L"failed to load avisynth.dll\n"); return E_FAIL;}
		IScriptEnvironment*  (__stdcall* CreateScriptEnvironment)(int version)
			= (IScriptEnvironment*(__stdcall*)(int)) GetProcAddress(avsdll, "CreateScriptEnvironment");
		if(!CreateScriptEnvironment)
		{wcscpy(msg, L"failed to load CreateScriptEnvironment()\n"); return E_FAIL;}

		fprintf(stderr, "Loading file %s...", W2A(video));
		IScriptEnvironment* env = CreateScriptEnvironment(AVISYNTH_INTERFACE_VERSION);
		AVSValue arg[2] = {W2A(video), 24.0f};
		
		AVSValue res;
		if (is_avs(video))
			res = env->Invoke("Import", AVSValue(arg, 1));
		else if (is_ts(video))
			res = env->Invoke("DirectShowSource", AVSValue(arg, 1));
		else
			res = new myFFSource(video, env);

		if(!res.IsClip())
		{swprintf(msg, L"Error: '%s' didn't return a video clip.\n", video); return E_FAIL;}
		PClip clip = res.AsClip();
		VideoInfo inf = clip->GetVideoInfo();
		if(!inf.HasVideo())
		{swprintf(msg, L"Error: '%s' didn't return a video clip.\n", video); return E_FAIL;}

		fprintf(stderr, "OK\n");

		if (inf.pixel_type != VideoInfo::CS_BGR32)
		{
			fprintf(stderr, "Converting to RGB32....");
			res = env->Invoke("ConvertToRGB32", res);
			clip = res.AsClip();
			inf = clip->GetVideoInfo();
		}

		if (inf.pixel_type != VideoInfo::CS_BGR32)
		{
			fprintf(stderr, "FAILED\n");
			{wcscpy(msg, L"FAILED Converting to RGB32"); return E_FAIL;}
		}
		else
		{
			fprintf(stderr, "OK\n");
		}

		// resize
		if (re_w !=0 && re_h != 0)
		{
			AVSValue args[3];
			args[0] = res;
			args[1] = AVSValue(re_w);
			args[2] = AVSValue(re_h);
			res = env->Invoke("LanczosResize", AVSValue(args, 3));
			clip = res.AsClip();
			inf = clip->GetVideoInfo();
		}

		// ShowTime
		if (showtime)
		{
			res = env->Invoke("ShowTime", res);
			clip = res.AsClip();
			inf = clip->GetVideoInfo();
		}

		int twidth = inf.width * w_count;
		int theight = inf.height * h_count;

		DWORD *data = (DWORD*) malloc(twidth * (theight+32) * sizeof(DWORD));
		for(int i=0; i< w_count*h_count; i++)
		{
			wchar_t t[1024];
			swprintf(t, L"%d/%d", i, w_count*h_count);
			SetWindowTextW(cb, t);

			fprintf(stderr, "Capturing frame %d/%d.\r", i,  w_count*h_count);
			int x = i % w_count;
			int y = h_count - 1 - i / w_count;
			PVideoFrame frame = clip->GetFrame(inf.num_frames * (0.5+i) / (w_count*h_count), env);
			DWORD* src_data = (DWORD*) frame->GetReadPtr();

			DWORD * tmp = data + twidth*(y*inf.height) + (x*inf.width);
			for (int j=0; j< inf.height; j++)
				memcpy(tmp + j*twidth, src_data + j*inf.width, sizeof(DWORD) * inf.width);

		}
		SetWindowTextW(cb, L"");

		const int logo_width = 100;
		const int logo_height = 28;
		RGBQUAD *logo = new RGBQUAD[logo_width*logo_height];
		DWORD logo_dword[logo_width*logo_height] = {0x874f638f, 0x9e4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9b4f638f, 0x9f4f638f, 0x784f638f, 0xe54f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4d618e, 0xff465b89, 0xff4e638f, 0xff4b608d, 0xff475c8a, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4e628e, 0xff465b89, 0xff4d628e, 0xff4d618e, 0xff465b8a, 0xff4e628e, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff475c8a, 0xff4c608d, 0xff4e628f, 0xff465b89, 0xff4d618e, 0xff4f638f, 0xff4f638f, 0xff50638f, 0xff4a5f8c, 0xff485d8b, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4e628e, 0xff475c8a, 0xff445988, 0xff485d8b, 0xff4f638f, 0xff50648f, 0xff4b608d, 0xff485d8b, 0xff50648f, 0xff4a5f8c, 0xff495d8b, 0xff50648f, 0xff4f638f, 0xff475c8a, 0xff4d618e, 0xff506490, 0xff4b608d, 0xff485d8b, 0xff4f638f, 0xff50638f, 0xff4b608d, 0xff445a88, 0xff485d8b, 0xff506490, 0xff495e8c, 0xff495d8b, 0xff50638f, 0xff4f638f, 0xff4f638f, 0xff4d618e, 0xff465b89, 0xff4e628e, 0xff4f638f, 0xff4f638f, 0xff4c608d, 0xff455a89, 0xff455a88, 0xff4b5f8c, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4d618e, 0xff465b89, 0xff445a88, 0xff4a5f8c, 0xff4f638f, 0xff4f638f, 0xff475c8a, 0xff4c618d, 0xff4e628e, 0xff475c8a, 0xff4f638f, 0xff495e8c, 0xff495d8b, 0xff50638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xcb4f638f, 0xdd4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4d618e, 0xff576a94, 0xff8190af, 0xff4e628e, 0xff61739b, 0xff7b8aab, 0xff4c618e, 0xff4f638f, 0xff4e628e, 0xff516590, 0xff8190af, 0xff556892, 0xff586b95, 0xff808fae, 0xff4f648f, 0xff4e628e, 0xff4f638f, 0xff4d628e, 0xff7e8dad, 0xff5d7098, 0xff506490, 0xff8290af, 0xff556893, 0xff4d618e, 0xff4f638f, 0xff4b5f8d, 0xff6f7fa3, 0xff7d8cac, 0xff4c618d, 0xff4f638f, 0xff4e628e, 0xff4c608d, 0xff7d8cac, 0xff9ba6c0, 0xff7282a5, 0xff4b5f8c, 0xff4c608d, 0xff63749c, 0xff7787a9, 0xff495e8c, 0xff6a7aa0, 0xff7383a6, 0xff4b5f8c, 0xff516590, 0xff7d8cac, 0xff5a6c95, 0xff4a5e8c, 0xff63769c, 0xff7686a8, 0xff4d618e, 0xff4c608d, 0xff60729a, 0xff929fba, 0xff7a8aab, 0xff485d8b, 0xff6f7fa3, 0xff6f80a4, 0xff4b608d, 0xff4f638f, 0xff4d618e, 0xff596b95, 0xff8996b4, 0xff566a94, 0xff4e628e, 0xff4b608c, 0xff556893, 0xff8c99b6, 0xff94a0bb, 0xff5f729a, 0xff4b5f8c, 0xff4f638f, 0xff4c618d, 0xff506490, 0xff8795b3, 0xff97a3bd, 0xff63759c, 0xff485d8b, 0xff4f638f, 0xff7a89aa, 0xff5e7099, 0xff576993, 0xff7e8dad, 0xff4d628e, 0xff6d7ea3, 0xff7080a4, 0xff4b608c, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xc44f638f, 0xdc4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff435988, 0xff99a4be, 0xffffffff, 0xff6e7fa3, 0xffafb8cc, 0xffffffff, 0xff62749c, 0xff4a5e8c, 0xff455a89, 0xff818faf, 0xffffffff, 0xff8693b2, 0xff909cb8, 0xffffffff, 0xff7786a8, 0xff465b8a, 0xff485d8a, 0xff6c7ca1, 0xffffffff, 0xffa2acc4, 0xff7686a8, 0xffffffff, 0xff8f9bb8, 0xff445988, 0xff4f638f, 0xff465c8a, 0xff96a2bc, 0xffb4bccf, 0xff4a5e8c, 0xff4e628e, 0xff475d8a, 0xffa7b1c7, 0xffe6e9ef, 0xffb1bacd, 0xffebedf2, 0xff8794b3, 0xff3b5182, 0xff9ea9c1, 0xffdce0e9, 0xff415686, 0xffafb8cb, 0xffd3d7e3, 0xff445987, 0xff5e7098, 0xfff2f4f7, 0xff7a89aa, 0xff3b5283, 0xff9ba7bf, 0xffd8dce6, 0xff4b608d, 0xff445988, 0xffbbc2d3, 0xffe5e8ee, 0xff909cb8, 0xff415686, 0xffc0c7d6, 0xffc7cedb, 0xff455a89, 0xff4f638f, 0xff4a5f8c, 0xff66779e, 0xffcbd1de, 0xff61739b, 0xff495e8b, 0xff526690, 0xffd0d5e1, 0xffcfd4e0, 0xffbcc3d4, 0xffe5e7ee, 0xff60729a, 0xff495e8b, 0xff4c608d, 0xffbfc7d6, 0xffd5dae4, 0xffb8c1d2, 0xffe5e8ef, 0xff697a9f, 0xff4c618e, 0xffe7eaf0, 0xff8996b3, 0xff6e7ea3, 0xfff2f3f6, 0xff546793, 0xffbcc4d5, 0xffcbd1de, 0xff465b89, 0xff4e638f, 0xff4f638f, 0xff4f638f, 0xc34f638f, 0xdc4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4e628e, 0xff4c618d, 0xffcfd5e1, 0xffdee2ea, 0xffb9c1d2, 0xffcfd4e0, 0xffe5e8ee, 0xffa0acc3, 0xff435887, 0xff475b89, 0xffbec5d5, 0xffe0e4eb, 0xffbfc6d6, 0xffc3cad9, 0xffe1e4ec, 0xffb6bed0, 0xff445a88, 0xff445988, 0xffabb5c9, 0xffe3e6ed, 0xffcad1de, 0xffbbc3d4, 0xffdde1e9, 0xffc9cfdc, 0xff495e8c, 0xff4e628f, 0xff4f638f, 0xff4d608d, 0xff4c608d, 0xff4f638f, 0xff4d618e, 0xff516590, 0xffeceef3, 0xff919db9, 0xff2f477b, 0xff7080a4, 0xff7081a4, 0xff405685, 0xff9faac2, 0xffd9dee7, 0xff3b5183, 0xffaab4c8, 0xffd5dae4, 0xff455a88, 0xff5f7199, 0xfff0f2f6, 0xff7a88aa, 0xff3c5283, 0xff9ba5be, 0xffd6dbe5, 0xff4b608d, 0xff445988, 0xffc8cedc, 0xffabb4c9, 0xff3a5082, 0xff455a88, 0xffc0c7d7, 0xffc7cedc, 0xff465b89, 0xff4f638f, 0xff4f638f, 0xff4e628e, 0xff4b608d, 0xff4e628e, 0xff485d8a, 0xff7180a4, 0xfff9fafc, 0xff5c6f98, 0xff3b5182, 0xff818faf, 0xff5d6f98, 0xff475c8a, 0xff65779d, 0xfffbfcfd, 0xff6b7ba1, 0xff334a7e, 0xffd8dde6, 0xffabb4c9, 0xff465c8a, 0xffe5e8ee, 0xff8491b0, 0xff697aa0, 0xffeff1f5, 0xff4f638f, 0xffb9c1d3, 0xffcdd3e0, 0xff465b89, 0xff4e638f, 0xff4f638f, 0xff4f638f, 0xc34f638f, 0xdc4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff475c8a, 0xff7c8bac, 0xffe3e6ed, 0xff7585a7, 0xffffffff, 0xffcbd1de, 0xff8593b1, 0xffe1e5ec, 0xff4c608e, 0xff65769d, 0xffeaedf2, 0xff7585a7, 0xffeef0f4, 0xffe4e7ee, 0xff7787a8, 0xffe9ecf1, 0xff5c6f98, 0xff526691, 0xffe6e9ef, 0xff7f8dae, 0xffd8dce6, 0xfff8f9fa, 0xff7484a7, 0xffe8eaf0, 0xff7282a6, 0xff485d8b, 0xff4f638f, 0xff4e638f, 0xff4e628f, 0xff4f638f, 0xff4e628f, 0xff4a5f8c, 0xffd3d8e3, 0xffbfc7d7, 0xff5d6f98, 0xffb8c0d2, 0xff7e8dad, 0xff3d5283, 0xff9ea9c1, 0xfff9fafb, 0xff6d7da2, 0xffc6cddb, 0xffcfd4e0, 0xff425887, 0xff5f7199, 0xffeff1f5, 0xff7a88aa, 0xff3c5283, 0xff9da8c0, 0xffdadee7, 0xff4a5f8c, 0xff4b608d, 0xffced4e0, 0xffbcc3d4, 0xff4e628e, 0xff435887, 0xffc3cad9, 0xffcbd1de, 0xff465b89, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4e628e, 0xff4f638f, 0xff4b5f8c, 0xff62739b, 0xfff4f6f8, 0xff8f9cb8, 0xff6f7fa3, 0xffc2c9d8, 0xff5e7199, 0xff485d8b, 0xff586b95, 0xffedeff4, 0xff9ba7c0, 0xff64759c, 0xffedeff4, 0xff919eb9, 0xff485d8a, 0xffebeef2, 0xffb2bbce, 0xff8d99b6, 0xffffffff, 0xff808fae, 0xffcdd3e0, 0xffc9cfdc, 0xff455a89, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xc34f638f, 0xdc4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff465b89, 0xff929eb9, 0xffaab4c9, 0xff455b89, 0xffc4cbda, 0xff929eb9, 0xff506490, 0xffc8cedc, 0xff5a6c96, 0xff7585a7, 0xffbac2d3, 0xff465b89, 0xffb2b8cc, 0xffacaec3, 0xff4c5985, 0xffc1c6d5, 0xff6e7fa3, 0xff61729a, 0xffc5ccda, 0xff4c618d, 0xff9ca8c0, 0xffbec5d6, 0xff455a88, 0xffb0b9cc, 0xff8694b2, 0xff465c8a, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff495e8b, 0xff6a7ba0, 0xffcad0dd, 0xffdbdfe8, 0xffc0c8d7, 0xff607199, 0xff435887, 0xff8593b1, 0xffc9cfdd, 0xffc5cbda, 0xffd8dce6, 0xff7e8cac, 0xff445988, 0xff60729a, 0xfff0f2f6, 0xff7a88aa, 0xff3f5585, 0xff8492b1, 0xffb0b9cd, 0xff455a88, 0xff697ba0, 0xfff0f2f6, 0xffedeef3, 0xff7888a9, 0xff405585, 0xff9da9c1, 0xffa1acc3, 0xff475c8a, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff485e8b, 0xff8896b3, 0xffd5d9e4, 0xffdadee7, 0xffa7b1c7, 0xff506490, 0xff4e628e, 0xff495d8a, 0xff7c8bac, 0xffd0d5e1, 0xffd8dde6, 0xffaab4c9, 0xff4e628e, 0xff4e628e, 0xffbac2d3, 0xffc0c7d7, 0xffd8dde6, 0xffb5bdd0, 0xffc1c8d8, 0xffd8dce6, 0xff7d8cad, 0xff485d8b, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xc34f638f, 0xdc4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4c628e, 0xff49618d, 0xff4e618e, 0xff4c608d, 0xff4c608d, 0xff4d628e, 0xff4c618d, 0xff4f638f, 0xff50618c, 0xff515d88, 0xff525d88, 0xff4a6290, 0xff3871a6, 0xff287ab5, 0xff476290, 0xff52628c, 0xff4f638f, 0xff4d618d, 0xff4d628e, 0xff4c618d, 0xff4c608d, 0xff4d618e, 0xff4d608d, 0xff4e628f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff50638f, 0xff495e8b, 0xff4a5f8c, 0xff536792, 0xff485d8b, 0xff4c608d, 0xff50638f, 0xff4e628e, 0xff495e8b, 0xff4c618e, 0xff4f638f, 0xff495e8b, 0xff4b608d, 0xff5e7199, 0xfff4f5f8, 0xff7a89aa, 0xff3f5585, 0xff7e8dad, 0xffa5afc5, 0xff4b5f8d, 0xff445a89, 0xffc5cbdb, 0xffb1bacd, 0xff435987, 0xff475c8a, 0xff94a0bb, 0xff97a3bd, 0xff485d8b, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff475c8a, 0xff4f638f, 0xff526590, 0xff475b89, 0xff4e628e, 0xff4f638f, 0xff4f638f, 0xff475c8a, 0xff4d618e, 0xff526691, 0xff475c8a, 0xff4d618e, 0xff4f638f, 0xff4d618e, 0xff495d8b, 0xff516490, 0xff475c8a, 0xff4b608d, 0xff4f638f, 0xff495e8b, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xc34f638f, 0xe84f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff50638f, 0xff4f638f, 0xff4c638e, 0xff49628e, 0xff45628d, 0xfe46628e, 0xff55638f, 0xff5b638f, 0xff4c6390, 0xff4c628f, 0xff4f608c, 0xff525f8a, 0xfe535c88, 0xff535f8a, 0xff4a6795, 0xff3777aa, 0xff208cc7, 0xff0b9cde, 0xff00a7ee, 0xff0099e5, 0xff116fb4, 0xff4a6491, 0xff54628c, 0xff4e628e, 0xff4f638f, 0xff4f628e, 0xff4d628f, 0xff4b6693, 0xff466795, 0xff456997, 0xff466997, 0xff466997, 0xff466997, 0xff466997, 0xff466997, 0xff466997, 0xff466997, 0xff466997, 0xff456896, 0xff486492, 0xff4d6390, 0xff4f638f, 0xff4f638f, 0xff4f628e, 0xff50618c, 0xff52608a, 0xff525f89, 0xff54608b, 0xff53608a, 0xff56628c, 0xff878eab, 0xff5f6a91, 0xff4e5b87, 0xff6c759a, 0xff8087a6, 0xff515f8a, 0xff4e5f8b, 0xff67789e, 0xff62749c, 0xff4c608d, 0xff4c5f8d, 0xff7681a8, 0xff7a82ac, 0xff505c91, 0xff545f94, 0xff545f94, 0xff546094, 0xff546094, 0xff546094, 0xff546094, 0xff546094, 0xff546094, 0xff525f92, 0xff4f6090, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4e638f, 0xff4c648f, 0xff4b638e, 0xff4a628e, 0xff4c648f, 0xff4c648f, 0xff4c648f, 0xff4b638f, 0xff4b638f, 0xff4a638e, 0xff4b648f, 0xff4b638f, 0xff4a638e, 0xff4d648f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xff4f638f, 0xce4f638f, 0x694f638f, 0x7c4e638f, 0x7948628e, 0x7742618c, 0x733f618c, 0x6a44618d, 0x6b596591, 0x87666793, 0xc3846c99, 0xfba671a0, 0xffd378aa, 0xffaa6a91, 0xe7665f82, 0x7e55638d, 0x6e4a6c98, 0x944076a4, 0xd72e85b6, 0xff1a98cd, 0xff07a8e4, 0xff00aff0, 0xff00aef1, 0xff00abee, 0xff00aaed, 0xff0098de, 0xff0075c3, 0xf91071b8, 0x91426697, 0x7157618a, 0x7951638e, 0x79466796, 0x6e486795, 0x7c605882, 0x9f7a486b, 0xa6834164, 0xa4814265, 0xa4814265, 0xa4814265, 0xa4814265, 0xa4814265, 0xa4814265, 0xa4814265, 0xa5824164, 0xa17d4569, 0x8163577f, 0x6d4a6290, 0x79465f8e, 0x7953608b, 0x6e52618b, 0x7f476797, 0xa03a6ea3, 0xa53471a7, 0xa43571a6, 0xa43571a6, 0xa43570a6, 0xa42c69a1, 0xa4336fa5, 0xa43672a7, 0xa4316da4, 0xa52d6ba3, 0xa03c6ea1, 0x7f476897, 0x6e4d5c89, 0x794f5d88, 0x78546094, 0x6d526291, 0x883f6680, 0xa3306f73, 0xa5357676, 0xa4357576, 0xa4357576, 0xa4357676, 0xa4357576, 0xa4357576, 0xa4357576, 0xa4357576, 0xa6347675, 0x9d3c717b, 0x77486789, 0x70555e95, 0x794f618f, 0x79475f8c, 0x6d4c628e, 0x795c5f8e, 0x8e5a5e8d, 0x8f5a5f8d, 0x8f5a5f8d, 0x8f5a5f8d, 0x8f5a5f8d, 0x8f5a5e8d, 0x8f5a5e8d, 0x8f5a5e8d, 0x8f5a5e8d, 0x905a5e8d, 0x885b5e8d, 0x6f56618e, 0x74466690, 0x794d638f, 0x794f638f, 0x7d4f638f, 0x5d4f638f, 0x47628e, 0x49628e, 0x7c6a98, 0x9b6f9d, 0xf926d9c, 0x4dac71a1, 0x92d779a9, 0xd3e17aab, 0xf5e97bac, 0xffea7bad, 0xffec7daf, 0xffab6b91, 0xfb815a76, 0xb6796b8c, 0xa035b6e8, 0xe020bcf2, 0xf910bdf4, 0xff06baf3, 0xff01b6ef, 0xff00b3ee, 0xff00b0ec, 0xff00adec, 0xff00aeed, 0xff009bdf, 0xff0073bf, 0xfe0076c4, 0xbd0474c0, 0x62a6ca8, 0x426899, 0x755070, 0x26b82a37, 0xbae40c13, 0xeaec070c, 0xecef0409, 0xecee040a, 0xecee040a, 0xecee040a, 0xecee030a, 0xecee030a, 0xecee030a, 0xecee030b, 0xecef020a, 0xebed030c, 0xc4e6050e, 0x3dba394a, 0x7783a3, 0x3d6fa1, 0x2e1c82c2, 0xbf038ed6, 0xeb0090da, 0xec0091dc, 0xec0091db, 0xec0091db, 0xec0091db, 0xec0091db, 0xec0091db, 0xec0091db, 0xec0090db, 0xec0090db, 0xeb008fd8, 0xbf038ed6, 0x301b83c4, 0x3e6da6, 0x3e717b, 0x511a8e59, 0xd0039c45, 0xeb009f42, 0xec009f41, 0xec009f41, 0xec009f41, 0xec009f41, 0xec009f41, 0xec009e41, 0xec009e41, 0xec009e41, 0xec009f41, 0xe9009d43, 0xb007974a, 0x192a7f6b, 0x4c688d, 0x737ea2, 0x409c598f, 0xb6b14486, 0xdcaf4787, 0xdcaf4687, 0xdbaf4687, 0xdbae4686, 0xdbae4686, 0xdbae4686, 0xdbae4586, 0xdbae4586, 0xdbae4586, 0xddae4586, 0xd3af4586, 0x8da84787, 0x77f568b, 0x56618e, 0x4a648f, 0x4e638f, 0x4f638f, 0x746996, 0xbb74a4, 0x5ae87bad, 0xb2ee7cad, 0xeded7cad, 0xffeb7bad, 0xffe47bac, 0xffe37aab, 0xffe17aab, 0xffe17aab, 0xffe77cae, 0xffaa6b91, 0xff7e5a77, 0xff7c6e8f, 0xff4fc1f0, 0xff42c2f2, 0xff38bef0, 0xff2cbcf4, 0xff1ebaf9, 0xff11b9fa, 0xff09b8f6, 0xff01b3ee, 0xff00b3ee, 0xff009fe0, 0xff0073c0, 0xff0075c1, 0xff0075c2, 0x35007ace, 0x525985, 0xfef1a09, 0xd7f21206, 0xffe9170e, 0xffe8170f, 0xffe7170f, 0xffe7170f, 0xffe7170f, 0xffe7160f, 0xffe7160f, 0xffe7160f, 0xffe7150f, 0xffe7150f, 0xffe7150f, 0xffe8140f, 0xffe90f0a, 0xf5ef1c16, 0x47efc7c1, 0x858b6e2, 0xe20091df, 0xff0094da, 0xff0093da, 0xff0093da, 0xff0093da, 0xff0093da, 0xff0093da, 0xff0092da, 0xff0092da, 0xff0092da, 0xff0092d9, 0xff0092d9, 0xff0092d9, 0xff0092d9, 0xe30095e1, 0xe0093d3, 0x2d00a04b, 0xfa00a441, 0xff00a048, 0xff00a048, 0xff00a048, 0xff00a048, 0xff00a048, 0xff00a048, 0xff009f47, 0xff009f47, 0xff009f47, 0xff009f47, 0xff009f47, 0xff009f47, 0xff00a046, 0xbe009f38, 0x71be96, 0x55e2bfd3, 0xf9bc4f8c, 0xffb64b8a, 0xffb74d8b, 0xffb74c8b, 0xffb74c8b, 0xffb74c8a, 0xffb74c8a, 0xffb74c8a, 0xffb74c8a, 0xffb64c8a, 0xffb64b8a, 0xffb64b8a, 0xffb64b8a, 0xffb84a89, 0xa2bd4989, 0x1b14f8b, 0x6f5d8e, 0x4b638f, 0x4d638f, 0xe27aab, 0x4e97bad, 0xd5e17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe77cae, 0xffaa6b91, 0xff7d5977, 0xff806e91, 0xff6dc7f9, 0xff63caff, 0xff57c5f8, 0xff49c0e2, 0xff3ebbba, 0xff30b089, 0xff19a6b3, 0xff1bbcf7, 0xff0cbcf8, 0xff00a0df, 0xff006ebd, 0xff0075c1, 0xfa0075c1, 0x32007bcf, 0x784b64, 0x37fa1f00, 0xffe7260e, 0xffe7250e, 0xffe7250e, 0xffe7240e, 0xffe7240e, 0xffe7240e, 0xffe7230e, 0xffe7230e, 0xffe7230e, 0xffe7230e, 0xffe7220e, 0xffe7220e, 0xffe7220e, 0xffe7210e, 0xffe71804, 0xe6e19a90, 0x807ec6e4, 0xfb0093db, 0xff0097dc, 0xff0097dc, 0xff0095db, 0xff0093da, 0xff0095db, 0xff0095da, 0xff0096db, 0xff0093da, 0xff0092d9, 0xff0096da, 0xff0095da, 0xff0095da, 0xff0096db, 0xff0094e4, 0x35089d9e, 0x640fa747, 0xff04a34a, 0xff04a44b, 0xff04a44b, 0xff04a44b, 0xff04a34b, 0xff04a34b, 0xff02a34a, 0xff00a247, 0xff02a349, 0xff03a34a, 0xff03a34a, 0xff02a34a, 0xff02a34a, 0xff01a249, 0xea029f45, 0x6796ceaf, 0xf1ce97b7, 0xffb84d8b, 0xffba558f, 0xffba548f, 0xffb9518d, 0xffb8508d, 0xffb8508c, 0xffb8508c, 0xffb8508c, 0xffb7508c, 0xffb8508c, 0xffb84f8c, 0xffb8508c, 0xffb9538e, 0xffb9538e, 0xeab8528e, 0x13bb528e, 0xbc528e, 0x99588f, 0x4e638f, 0xe27aab, 0x4e17aab, 0xcae17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe17aab, 0xffe178aa, 0xffe376ab, 0xffee78b2, 0xffb26898, 0xff7f567b, 0xff80728b, 0xff71c5c7, 0xff5ac09b, 0xff49b668, 0xff41b142, 0xff41b22c, 0xff36a727, 0xff027631, 0xff0f8b72, 0xff5bc2d9, 0xff97d8f5, 0xff3692d0, 0xff006dbd, 0xfa0074c0, 0x32007ace, 0x745467, 0x3af82e00, 0xfce8330d, 0xffe8330d, 0xffe8310b, 0xffe72700, 0xffe62600, 0xffe62600, 0xffe62600, 0xffe62500, 0xffe62500, 0xffe62400, 0xffe62400, 0xffe62601, 0xffe82e0d, 0xffe82e0c, 0xffe92705, 0xffd28f81, 0xff95c4d6, 0xfd009ade, 0xff009bde, 0xff009add, 0xff1ca4e0, 0xff32ace2, 0xff0ea0de, 0xff039add, 0xff0097dc, 0xff23a6e1, 0xff2eaae2, 0xff0098dc, 0xff089cdd, 0xff0a9dde, 0xff0099dd, 0xff0198e4, 0x413dabac, 0x6f3db062, 0xff0da74b, 0xff10a84e, 0xff0fa84d, 0xff08a547, 0xff07a447, 0xff05a446, 0xff0ba64b, 0xff15a952, 0xff09a54a, 0xff05a446, 0xff05a446, 0xff08a549, 0xff0da74d, 0xff09a64b, 0xfb14a852, 0xfeaec8ba, 0xffc08baa, 0xffbf5691, 0xffbf5c93, 0xffbe5d94, 0xffc3679b, 0xffc3689d, 0xffc36a9d, 0xffc36a9d, 0xffc3699d, 0xffc3699d, 0xffc3699d, 0xffc3689c, 0xffc16298, 0xffbc5992, 0xffbd5a93, 0xeabd5a93, 0x18bc5993, 0xbd5993, 0xc45893, 0x9f5d92, 0xe17aab, 0x4e17aab, 0xcae17aab, 0xffe17aab, 0xffe179aa, 0xffe177a9, 0xffe075a7, 0xffe477ac, 0xffec81b8, 0xffe18fb6, 0xffcaa3a9, 0xff8ca07d, 0xff51944a, 0xff45a83d, 0xff3eb031, 0xff3bae28, 0xff3caf2a, 0xff3db02f, 0xff40b233, 0xff36a935, 0xff037838, 0xff00702c, 0xff157d40, 0xffa6d5d8, 0xffc2e8fe, 0xff54a4d9, 0xff006fbe, 0x340074cb, 0x725966, 0x39f83b00, 0xfce8400b, 0xffe73b07, 0xffea4c1d, 0xfff6af9c, 0xfff6b3a1, 0xfff5a892, 0xfff5ad9b, 0xfff7b4a3, 0xfff5ad9a, 0xfff5a793, 0xfff6b3a3, 0xfff49f89, 0xffe83c0d, 0xffe83a09, 0xffea3504, 0xffd19280, 0xff8dbed0, 0xff009fe1, 0xff009fe0, 0xff0099dd, 0xff8dd4f1, 0xfffafdfe, 0xffb6e3f6, 0xffc5e8f8, 0xff25a9e3, 0xffb4e2f5, 0xffe4f5fc, 0xff42b6e7, 0xffd3eef9, 0xff92d5f1, 0xff0099dd, 0xff019de4, 0x4658b3b4, 0x7956b66f, 0xff1aab4e, 0xff1bab4f, 0xff20ad53, 0xff3db86a, 0xff40b96d, 0xff39b769, 0xff7ccf9b, 0xffd9f1e3, 0xff6cca8f, 0xff39b769, 0xff3fb86c, 0xff29b05c, 0xff16aa4d, 0xff15ab4d, 0xff20ac55, 0xffa9c2b3, 0xffc290ac, 0xffc35e97, 0xffc15e95, 0xffc873a3, 0xfff8ecf2, 0xfffaf2f6, 0xfff6e6ee, 0xfff5e6ee, 0xfff5e6ee, 0xfff5e6ee, 0xfff5e5ee, 0xfffaf1f6, 0xfff7eaf1, 0xffca78a6, 0xffbf5b93, 0xe9c16097, 0x17c16097, 0xc16097, 0xc16097, 0xc66097, 0xe178aa, 0x4e178aa, 0xcfe176a9, 0xffe175a8, 0xffe17aac, 0xffe288b3, 0xffe89dc2, 0xffd2afb8, 0xff7eb36e, 0xff58b74f, 0xff3eb537, 0xff37b42e, 0xff3ab530, 0xff3cb231, 0xff3db032, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff40b234, 0xff36a935, 0xff037939, 0xff007538, 0xff007331, 0xff8bc7c7, 0xffc6ebff, 0xffc4eafd, 0xe870b6e2, 0x2a1787d7, 0x7d676f, 0x39f74200, 0xfce84709, 0xffe84306, 0xffea5219, 0xfff3a181, 0xfff6b499, 0xffffffff, 0xfffbe1d5, 0xfff39c7f, 0xfffce6dd, 0xffffffff, 0xfff6b197, 0xfff29472, 0xffe8450b, 0xffe84307, 0xffea3f02, 0xffd19480, 0xff8dbfd1, 0xff00a4e3, 0xff00a4e2, 0xff009edf, 0xff92d8f2, 0xffffffff, 0xff9ddcf4, 0xffffffff, 0xffe5f5fc, 0xfff5fbfe, 0xfffefeff, 0xffebf8fc, 0xffffffff, 0xff6dc8ed, 0xff009ddf, 0xff00a0e3, 0x5080c0ce, 0x8389c38d, 0xff31af4d, 0xff30af4e, 0xff4dba66, 0xfff1faf4, 0xfff4faf5, 0xffe2f4e6, 0xfff3faf4, 0xffffffff, 0xffeff9f1, 0xffe3f4e7, 0xfff7fcf9, 0xffd3eedb, 0xff33b157, 0xff29ae4d, 0xff35b058, 0xffabc2b4, 0xffc393ae, 0xffc8669b, 0xffc5669a, 0xffcd7ba8, 0xffffffff, 0xfff3dfea, 0xffecccdd, 0xfff0d6e5, 0xffedcfe0, 0xffeed2e2, 0xffeccdde, 0xfff1dae7, 0xffffffff, 0xffd38cb3, 0xffc26197, 0xe9c5689c, 0x17c5689c, 0xc5689c, 0xc5689c, 0xc5689c, 0xe286b2, 0x2e284b1, 0xb4e38fb7, 0xffe5aac6, 0xffe7bed1, 0xffe8cbd9, 0xfff2d1e5, 0xffb7c8ab, 0xff2eb026, 0xff37af2d, 0xff3cb032, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff40b234, 0xff36a935, 0xff037939, 0xff007538, 0xff007434, 0xd794cdce, 0x94c5eaff, 0x54bce4fa, 0x1cb6e2fa, 0x140a2de, 0xb76441, 0x39f14b01, 0xfce94e07, 0xffe94e07, 0xffe94c05, 0xffe73700, 0xffef7745, 0xffffffff, 0xfff08355, 0xffe52a00, 0xfff18e64, 0xffffffff, 0xffed6c37, 0xffe73800, 0xffe94b07, 0xffe94b07, 0xffeb4600, 0xffd1977f, 0xff8fbfd3, 0xff05a8e5, 0xff05a9e4, 0xff00a3e1, 0xff92d9f3, 0xfffeffff, 0xff5dc7ed, 0xfffafdfe, 0xffa0def5, 0xffc0e9f8, 0xffe8f7fd, 0xffafe3f7, 0xffffffff, 0xff39b8e8, 0xff00a3e2, 0xff00a4e1, 0x589dcae4, 0x8cb2cfa5, 0xff4db34e, 0xff4fb451, 0xff68bf6a, 0xffffffff, 0xffc2e4c3, 0xff4cb350, 0xff9cd69f, 0xffffffff, 0xff8ace8e, 0xff4db454, 0xffd0ebd2, 0xfff7fbf6, 0xff57b95f, 0xff46b250, 0xff51b559, 0xffafc2b4, 0xffc497b1, 0xffcc6da1, 0xffc96d9f, 0xffd181ad, 0xfffffefe, 0xfff0d5e3, 0xffe0acc8, 0xffeed0e0, 0xffffffff, 0xfff9edf3, 0xfff4dfea, 0xffeccadd, 0xffffffff, 0xffd690b6, 0xffc8689d, 0xe9ca6fa0, 0x17ca6fa0, 0xca6fa0, 0xca6fa0, 0xca6fa0, 0xe394ba, 0xe38fb7, 0xee6b5cc, 0x58e8d6df, 0xb9e8cedb, 0xfce8ccda, 0xfff1cce1, 0xffbac4ac, 0xff39af2f, 0xff3db033, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3eb034, 0xff3db034, 0xff3baf35, 0xff3cb135, 0xff30a736, 0xff00753a, 0xff007539, 0xff007332, 0x45409974, 0xbbe5f8, 0xc7ebff, 0xa6e1fe, 0x708ba0, 0xee5002, 0x39eb5403, 0xfcea5404, 0xffea5404, 0xffea5404, 0xffe94a00, 0xfff7bfa1, 0xfffef8f5, 0xffec6019, 0xffe94a00, 0xffec6825, 0xfffffefe, 0xfff5b18e, 0xffe84800, 0xffea5305, 0xffea5305, 0xffec4e00, 0xffd09a7e, 0xff94c1d3, 0xff1caee7, 0xff1dade6, 0xff0fa8e3, 0xff9cdbf4, 0xffffffff, 0xff57c2ec, 0xffecf8fd, 0xffa1ddf5, 0xffafe2f6, 0xffe2f4fc, 0xffade2f6, 0xfffdfeff, 0xff34b6e8, 0xff0ea9e4, 0xff0fa9e3, 0x66a4cde4, 0x94b9d2a6, 0xff65b951, 0xff67b954, 0xff7cc36c, 0xffffffff, 0xffc2e3bc, 0xff54b141, 0xffa0d497, 0xffffffff, 0xff8fcc84, 0xff55b245, 0xffcfe9cb, 0xfff4faf3, 0xff6ebe61, 0xff61b853, 0xff6abb5d, 0xffb2c2b4, 0xffc69bb4, 0xffd175a6, 0xffcf75a5, 0xffd588b1, 0xffffffff, 0xffedcbdd, 0xffdfa5c3, 0xfff3dfea, 0xffffffff, 0xfff9eef4, 0xffeac5d9, 0xffe6bad1, 0xffffffff, 0xffd996ba, 0xffcc71a1, 0xe9ce77a5, 0x17ce77a5, 0xce77a5, 0xce77a5, 0xce77a5, 0xe392b9, 0xe38db6, 0xe6b3cb, 0xe8d1dc, 0xe8cbd9, 0x38e8cbd9, 0x94f4cde4, 0xe4c0c5b2, 0xff38af2e, 0xff3db033, 0xff3eb034, 0xff3db034, 0xff3caf35, 0xff3aaf35, 0xff38af35, 0xff38af36, 0xff3baf35, 0xff44b433, 0xff58b82d, 0xff67b828, 0xff369330, 0xff047739, 0xff00723b, 0x42006e2c, 0x308f66, 0x8ecbca, 0xb8e8ff, 0xc5703a, 0xf25600, 0x39ea5b03, 0xfceb5b02, 0xffeb5b02, 0xffea5700, 0xffeb5d09, 0xfffdf1ea, 0xfff8c8ab, 0xffe84b00, 0xffe95100, 0xffe84e00, 0xfffad5bf, 0xfffce5d8, 0xffea5602, 0xffea5601, 0xffea5902, 0xffec5500, 0xffcf9b7e, 0xff9bc2d4, 0xff36b2e9, 0xff33b1e8, 0xff42b7e9, 0xffe5f5fc, 0xfffcfdfe, 0xff52bceb, 0xffcdecf9, 0xffd9f0fb, 0xffc4e8f8, 0xffe8f6fc, 0xffd5effa, 0xffedf8fd, 0xff38b4e8, 0xff2cb0e6, 0xff29aee5, 0x6cb1d1e6, 0x9dc0d6a9, 0xff77be55, 0xff79be58, 0xff8cc86f, 0xffffffff, 0xffc9e4bc, 0xff66b542, 0xffaad697, 0xffffffff, 0xff9bcf85, 0xff68b746, 0xffd4ebcb, 0xfff6faf3, 0xff7fc265, 0xff74be57, 0xff7bbf61, 0xffb4c3b4, 0xffc89eb6, 0xffd67dab, 0xffd37caa, 0xffd88fb5, 0xfffffeff, 0xfff0d3e2, 0xffde9ebf, 0xffedc9dc, 0xffffffff, 0xfff2d8e5, 0xffdfa0c1, 0xffeac3d8, 0xffffffff, 0xffdd9bbd, 0xffd178a6, 0xe9d37eaa, 0x17d37eaa, 0xd37eaa, 0xd37eaa, 0xd37eaa, 0xe392b9, 0xe38db6, 0xe6b3cb, 0xe8d1dc, 0xe8cbda, 0xf1cce4, 0xe9cbdc, 0x5271b867, 0xff34ae2e, 0xff39af35, 0xff37af36, 0xff38af36, 0xff3eb134, 0xff4bb431, 0xff5fb92b, 0xff78bd25, 0xff96c31d, 0xffa5ba19, 0xff94c11d, 0xff8fc91f, 0xff94c71e, 0xff76b624, 0xee399430, 0x39067939, 0x722d, 0x37e41, 0x98a37e, 0xf86303, 0xeb6100, 0x39eb6200, 0xfceb6100, 0xffeb6000, 0xffeb6206, 0xfff29456, 0xfff9cfb1, 0xfff4a874, 0xffef8345, 0xffef843f, 0xffef8345, 0xfff5ad7d, 0xfff9cdae, 0xfff08845, 0xffeb5d01, 0xffeb5f00, 0xffed5b00, 0xffce9d7e, 0xffa0c2d4, 0xff4eb8ea, 0xff4cb6e9, 0xff52b8e9, 0xffcceaf9, 0xfffcfefe, 0xff69c3ed, 0xffaddef5, 0xffd2ecfa, 0xffdef1fb, 0xfff3fafe, 0xffcfebf9, 0xffc6e8f8, 0xff57bceb, 0xff45b4e8, 0xff43b3e8, 0x75bad3e7, 0xa5c6d8ac, 0xff88c35a, 0xff89c35c, 0xff9acc74, 0xffffffff, 0xffdfeed4, 0xff9ece7b, 0xffc9e4b7, 0xffffffff, 0xffbfdfa9, 0xff9ecf7e, 0xffe6f3df, 0xfff8fcf6, 0xff8fc769, 0xff86c35b, 0xff8bc465, 0xffb5c3b4, 0xffc9a1b8, 0xffda84b0, 0xffd784af, 0xffdc95ba, 0xfffffefe, 0xfff4dde8, 0xfff3dbe7, 0xfff9ecf2, 0xfffbf1f6, 0xfff9edf3, 0xfff5dfeb, 0xfff1d3e2, 0xffffffff, 0xffe0a1c1, 0xffd57fac, 0xe9d785b0, 0x17d785af, 0xd785af, 0xd785af, 0xd785af, 0xe392b9, 0xe38db6, 0xe6b3cb, 0xe9d1e2, 0xe5cbe0, 0xb8c4b0, 0x60b65d, 0x412bad2a, 0xf645b233, 0xff58b72d, 0xff72bc26, 0xff90c11f, 0xffaec716, 0xffcccb0e, 0xffe2ce08, 0xfff5d003, 0xffffd400, 0xfff89b00, 0xffe48605, 0xd8b9a612, 0x7b87c721, 0x4c95c81e, 0x1e92c61e, 0x2258a33, 0x1b8635, 0xd8736, 0x856f0b, 0xfb6500, 0xec6800, 0x39ec6800, 0xfcec6800, 0xffec6400, 0xffed7111, 0xfff9d3b5, 0xfff9d3b6, 0xfffad4b9, 0xfffdebdc, 0xffffffff, 0xfffce8d9, 0xfffad3b8, 0xfffad4b9, 0xfff7c29b, 0xffeb6503, 0xffeb6400, 0xffed6100, 0xffcd9f7e, 0xffa4c4d5, 0xff5ebeed, 0xff5fbdec, 0xff55b8ea, 0xff87cdf1, 0xffffffff, 0xffc4e6f8, 0xffd2ecf9, 0xffdff2fb, 0xfffefeff, 0xffffffff, 0xffe3f3fc, 0xffe1f3fc, 0xff93d2f2, 0xff51b8ea, 0xff56b9ea, 0x7ebed4e8, 0xafcddcaf, 0xff97c95e, 0xff99ca62, 0xffa5d075, 0xffeaf4de, 0xffeef6e5, 0xffedf5e1, 0xfff7faf1, 0xffffffff, 0xfff4f9ee, 0xffecf5e1, 0xffeef6e5, 0xffe4f0d5, 0xff9dcc6b, 0xff95c860, 0xff99c969, 0xffb7c3b4, 0xffcba5ba, 0xffdf8cb6, 0xffdc8cb4, 0xffe19cbe, 0xfffffefe, 0xfffdf8fa, 0xfff9eaf1, 0xfff9edf3, 0xfff9ebf2, 0xfff9ecf2, 0xfff9ebf2, 0xfffbf4f8, 0xffffffff, 0xffe4a7c6, 0xffd987b1, 0xe9db8db5, 0x17db8cb5, 0xdb8cb5, 0xdb8cb5, 0xdb8cb5, 0xe18ec6, 0xe188c3, 0xe4b1d9, 0xeed2d1, 0xdecb4c, 0xb7c60b, 0xb2c50a, 0x15bcc613, 0xcbd0cb0d, 0xffe2ce08, 0xfff6d002, 0xffffd100, 0xffffd100, 0xffffd100, 0xffffd100, 0xffffd000, 0xffffd400, 0xfff59b00, 0xfff47b00, 0x95f57f00, 0xabaf16, 0x8cc720, 0x8cc51f, 0x278b33, 0x178635, 0x2e8530, 0xdd6f04, 0xf16d00, 0xed6d00, 0x39ed6d00, 0xfced6d00, 0xffed6d00, 0xffec6d00, 0xffec6c05, 0xffec6d06, 0xffec6805, 0xffef832b, 0xfff6b176, 0xffef7e25, 0xffec6805, 0xffed6c06, 0xffed6b04, 0xffed6b00, 0xffed6b00, 0xffef6700, 0xffcda07d, 0xffa8c5d6, 0xff6dc3ef, 0xff6ec3ee, 0xff6dc2ee, 0xff74c5ef, 0xffb8e1f7, 0xffa0d7f4, 0xff70c4ee, 0xff72c4ee, 0xffa5daf5, 0xffb4e0f6, 0xff78c7ef, 0xff72c5ef, 0xff6ec3ee, 0xff69c1ed, 0xff64beec, 0x8bc9def1, 0xb3d5e2b4, 0xffa6cf63, 0xffaad16b, 0xffaad16b, 0xffa9d16b, 0xffaad16c, 0xffa7cf69, 0xffbada89, 0xffd8eaba, 0xffb5d781, 0xffa6cf68, 0xffa7d06b, 0xffa6cf6a, 0xffa6d06a, 0xffa5cf68, 0xffa7cf6d, 0xffb8c3b4, 0xffcca7bc, 0xffe494bb, 0xffe195ba, 0xffe29abd, 0xffebb6d0, 0xffecb9d3, 0xffecbad3, 0xffebbad3, 0xffecbad2, 0xffecbad2, 0xffebbad3, 0xffebb9d2, 0xffeab7d1, 0xffe39cbe, 0xffdf92b8, 0xe9e093ba, 0x17df94ba, 0xdf94ba, 0xdf94ba, 0xdf94ba, 0xf0b15d, 0xf0af5d, 0xf2c260, 0xfbd212, 0xffd100, 0xffd200, 0xffd200, 0x23ffd200, 0xf5ffd100, 0xffffd100, 0xffffd000, 0xfffed000, 0xfffed000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffed400, 0xfff49b00, 0xffef7e00, 0x9af18100, 0xf47f00, 0xd49709, 0x8dc31f, 0x208c34, 0xc8738, 0x867d1a, 0xfc7100, 0xee7200, 0xed7200, 0x3bed7200, 0xffed7200, 0xffed7200, 0xffed7200, 0xffed7100, 0xffed7100, 0xffed7200, 0xffed6e00, 0xffec6800, 0xffed6e00, 0xffed7100, 0xffed7000, 0xffed7000, 0xffee7100, 0xffed7100, 0xfff06c00, 0xffcda17c, 0xffabc6d7, 0xff7bc9f2, 0xff7cc9f0, 0xff7cc8f1, 0xff7ac8f0, 0xff72c4ef, 0xff74c5ef, 0xff78c7f0, 0xff78c6f0, 0xff72c4ef, 0xff70c3ef, 0xff76c6ef, 0xff76c6ef, 0xff77c6ef, 0xff78c6ef, 0xff73c4ef, 0x89cfe2f4, 0xb2d9e3b5, 0xffb3d469, 0xffb7d670, 0xffb6d670, 0xffb5d56e, 0xffb5d56e, 0xffb5d56f, 0xffb2d46b, 0xffafd266, 0xffb2d46c, 0xffb4d46e, 0xffb3d46e, 0xffb3d56d, 0xffb3d56f, 0xffb3d46d, 0xffb4d473, 0xffb9c4b5, 0xffcfabbf, 0xffe99cc0, 0xffe69ec0, 0xffe69dbf, 0xffe397bc, 0xffe397bc, 0xffe497bc, 0xffe496bb, 0xffe496bb, 0xffe496bb, 0xffe396bb, 0xffe396bb, 0xffe396bb, 0xffe49bbe, 0xffe59bbf, 0xece49bbe, 0x18e49bbf, 0xe49bbf, 0xe49bbf, 0xe49bbf, 0xffd400, 0xffd500, 0xffd200, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0x23fdd000, 0xf3fdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffed400, 0xfff49b00, 0xffef7e00, 0x9af08200, 0xf18200, 0xf97e00, 0xcf930a, 0x2e8b31, 0x32852f, 0xde7904, 0xf37800, 0xef7800, 0xef7800, 0x1eef7800, 0xf1ef7800, 0xffef7800, 0xffef7800, 0xffef7800, 0xffef7800, 0xffef7800, 0xffee7800, 0xffee7800, 0xffee7800, 0xffee7700, 0xffee7700, 0xffee7700, 0xffee7700, 0xffef7500, 0xffef7400, 0xffc5ac96, 0xffb6c6d0, 0xff89cef3, 0xff87cef4, 0xff88cdf2, 0xff88cef3, 0xff87cdf3, 0xff87cef3, 0xff87cdf3, 0xff87cdf3, 0xff86cdf3, 0xff86cdf2, 0xff86cdf3, 0xff86cdf3, 0xff85ccf2, 0xff83cdf3, 0xff81c9ee, 0x89d6e0eb, 0xb2d9dec0, 0xffc0d96d, 0xffc3db75, 0xffc2db75, 0xffc2db75, 0xffc2db75, 0xffc2da75, 0xffc1da75, 0xffc1da74, 0xffc0da75, 0xffc0da75, 0xffc0da74, 0xffc0da74, 0xffbfda74, 0xffbfdb6f, 0xffc0d87e, 0xffbcc3be, 0xffcbb1bf, 0xffefa4c6, 0xffeba5c5, 0xffeba5c5, 0xffeba5c5, 0xffeba5c5, 0xffeaa4c5, 0xffeaa4c5, 0xffeaa4c5, 0xffeaa4c5, 0xffeaa4c5, 0xffe9a3c4, 0xffeaa3c4, 0xffeaa3c4, 0xffeaa3c4, 0xdde9a2c4, 0xce8a0c2, 0xe8a0c2, 0xe8a0c2, 0xe8a0c2, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0x23fdd000, 0xf3fdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdd000, 0xfffdcf00, 0xfffed300, 0xfff49700, 0xffef7a00, 0x9cf08100, 0xf08200, 0xf08200, 0xf37f00, 0xe48203, 0xe48103, 0xf07a00, 0xef7900, 0xef7900, 0xef7900, 0xef7900, 0x6fef7d00, 0xfaef7f00, 0xfff17b00, 0xfff37900, 0xfff27900, 0xfff27900, 0xfff27900, 0xfff27900, 0xfff17900, 0xfff17800, 0xfff17800, 0xfff17800, 0xfff27700, 0xfff17800, 0xffd39556, 0xffb3b8bc, 0xffc1c0be, 0xffaecede, 0xff92d4f7, 0xff8fd3f7, 0xff90d4f7, 0xff90d5f8, 0xff91d4f8, 0xff91d4f8, 0xff90d4f7, 0xff8fd4f7, 0xff8fd4f7, 0xff8fd3f7, 0xff8ed3f7, 0xff8ed4f8, 0xff8ed2f6, 0xffa0c0d1, 0x89e2dfe0, 0xb2d8d8da, 0xffc2cd8c, 0xffd0e276, 0xffd0e276, 0xffd0e276, 0xffcfe276, 0xffcfe176, 0xffcee176, 0xffcfe175, 0xffcee175, 0xffcee175, 0xffcce174, 0xffcbdf73, 0xffcbdf72, 0xffcbdf79, 0xffc8cfae, 0xffbcbdc2, 0xffb6b5b6, 0xffe1adc5, 0xfff4abcc, 0xfff3abcb, 0xfff3abcb, 0xfff3abcb, 0xfff3abcb, 0xfff2abcb, 0xfff2abcb, 0xfff2aaca, 0xfff2aaca, 0xfff1a9ca, 0xfff0a9c9, 0xffeeaac9, 0xfeeeaac9, 0x67eda9c9, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0x24fdd000, 0xf7fdcf00, 0xfffdce00, 0xfffdce00, 0xfffdce00, 0xfffdce00, 0xfffdcf00, 0xfffdd000, 0xfffdd200, 0xfffed800, 0xfff6ae00, 0xfff28d00, 0x96f08400, 0xf08100, 0xf08200, 0xf08200, 0xf48200, 0xf48300, 0xf07e00, 0xef7800, 0xef7900, 0xef7900, 0xef7900, 0xef7d00, 0x3af17f00, 0x75e59639, 0x9bd4a670, 0xbbd7a46a, 0xdcd7a56b, 0xf4d7a56b, 0xffd7a56b, 0xffd6a46b, 0xffd6a46b, 0xffd6a46a, 0xffd6a46a, 0xffd6a36a, 0xffc8ab8d, 0xffb6b9bd, 0xffb4b6b8, 0xffbbbbbb, 0xffcac8c8, 0xffc7d5dd, 0xffbdd8e7, 0xffb5d0de, 0xffafcad8, 0xffaec9d7, 0xffafcad8, 0xffb0cbd9, 0xffafcbd9, 0xffafcbd9, 0xffafcad9, 0xffafcad9, 0xffaecad8, 0xffb8c7cf, 0xffccc9c8, 0x8bf0eff0, 0xb3ececee, 0xffc8c8ca, 0xffc8ccae, 0xffcad1a2, 0xffcad0a3, 0xffcad0a3, 0xffcad0a2, 0xffc9d0a2, 0xffc9d0a2, 0xffc8cfa2, 0xffc8cea1, 0xffc9d1a3, 0xffd2d9ab, 0xffd8deb3, 0xffd2d4c4, 0xffc5c5ca, 0xffb8b8b9, 0xffb3b5b5, 0xffb9b6b8, 0xffd3b7c4, 0xffddb7c8, 0xffddb7c8, 0xffddb7c8, 0xffddb7c8, 0xffddb8c8, 0xffdeb8c8, 0xfbdeb8c9, 0xebdfb8ca, 0xcfe0b9cb, 0xafe7b9cd, 0x90f1b2ce, 0x43f1afcd, 0xeda9c9, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0xfdd000, 0x21fdd000, 0xe9fed300, 0xfafed700, 0xfefeda00, 0xfcfede00, 0xeffee300, 0xd6fee700, 0xbaffeb00, 0x9fffee00, 0x7dfff000, 0x5efff400, 0x42ffee00, 0x1af5a200, 0xef7f00, 0xf08400, 0xf08400, 0xf08400, 0xf08400, 0xf08300, 0xef7a00, 0xef7900, 0xef7900, 0xef7900, 0xef7d00, 0xf27d00, 0xdba96e, 0xbac8d8, 0xbfc5cc, 0xac5ccd4, 0x25cbd3dd, 0x44cbd3dd, 0x65cfd6e0, 0x8cd2dae3, 0xaed3dbe4, 0xcfd5dde6, 0xecd6dde7, 0xfcd7dde4, 0xffd9dadc, 0xffd8d7d8, 0xffd6d7d8, 0xffd9d9da, 0xffe1dede, 0xffebe8e6, 0xfff2edec, 0xffeeeae9, 0xffe5e1df, 0xffddd9d8, 0xffdcd8d7, 0xffdcd8d7, 0xffdbd7d6, 0xffdbd7d6, 0xffdbd7d6, 0xffdbd7d6, 0xffdcd9d8, 0xffe8e8e8, 0x89fefefe, 0xb7fbfbfb, 0xffe3e3e4, 0xffd8d7de, 0xffd7d6de, 0xffd7d6de, 0xffd7d6de, 0xffd8d7de, 0xffd9d8df, 0xffd7d7de, 0xffdadae1, 0xffe4e3eb, 0xffecebf3, 0xffedecf4, 0xffe4e3eb, 0xffdbdbdf, 0xffd6d6d7, 0xffd4d4d5, 0xffd5d5d6, 0xffd5d6d7, 0xffd2d7d6, 0xf3d2d6d5, 0xdad2d6d5, 0xbbd1d5d5, 0x9cd0d4d4, 0x77cfd2d2, 0x54cbd1d0, 0x36cad0cf, 0x17cacdcd, 0x6ccc4c9, 0xdcc1ce, 0xf0b3cf, 0xf1afcd, 0xeda9c9, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xfdce00, 0xfdce00, 0xfdce00, 0xfdce00, 0xfdce00, 0xfdce00, 0xfdce00, 0x3fdcf00, 0x23ffea00, 0x33fff300, 0x41fff400, 0x3afff300, 0x1cfff300, 0x8fff400, 0xfff400, 0xfff200, 0xfff100, 0xfff600, 0xfff400, 0xf5a500, 0xef7f00, 0xf08400, 0xf08400, 0xf08400, 0xf08400, 0xf08300, 0xef7a00, 0xef7900, 0xef7900, 0xef7900, 0xef7d00, 0xf27d00, 0xdca767, 0xbdc4cb, 0xc2c1c0, 0xc8c8c8, 0xcfd0d2, 0xced0d1, 0xd4d4d6, 0xdbdbdc, 0xddddde, 0x6e1e1e2, 0x18e7e7e8, 0x39ebebec, 0x58eeeeef, 0x7df2f2f2, 0xa3f4f4f4, 0xc2f4f4f5, 0xc6f5f5f6, 0xc3f7f7f7, 0xc3fbfbfb, 0xc3ffffff, 0xcaffffff, 0x9ffdfdfd, 0x59ededee, 0xa7f1f1f2, 0xc8f6f6f7, 0xc3f6f6f7, 0xc3f6f6f7, 0xc3f6f6f7, 0xc7f6f6f7, 0xbcfafafa, 0x27ffffff, 0x56ffffff, 0xc5f8f8f8, 0xc4f6f6f7, 0xc3f6f6f7, 0xc3f6f6f7, 0xc4f7f7f7, 0xc7f3f3f3, 0x8ce8e8e9, 0x5beeeeef, 0xc5ffffff, 0xd4ffffff, 0xcffefefe, 0xd0f7f7f8, 0xcff5f5f5, 0xd4f3f3f4, 0xc8f1f1f2, 0xa9efeff0, 0x86ececed, 0x61eaeaeb, 0x42e7e7e8, 0x23e4e4e5, 0xae0e0e1, 0xddddde, 0xdbdbdc, 0xd7d7d8, 0xced1d1, 0xcdd0d0, 0xcccdce, 0xcec3c9, 0xddc0ce, 0xf0b3cf, 0xf1afcd, 0xeda9c9, 0xeca7c7, 0xeca7c7, 0xeca7c7, 0xeca7c7, };
		memcpy(logo, logo_dword, sizeof(logo_dword));
		for(int x=0; x<w_count*2; x++)
		for(int y=0; y/2<h_count/2; y++)
		{
			RGBQUAD *tmp = (RGBQUAD*)data + twidth*((y+1)*inf.height-logo_height - inf.height/2) 
				                + (x*inf.width/2 + inf.width/2 - logo_width);

			if (x%2==0)
				tmp +=2;
			else
				tmp -=2;
			for(int y1=0; y1<logo_height; y1++)
			{
				RGBQUAD *src = logo + logo_width * y1;
				RGBQUAD *dst = tmp + twidth * y1;
				for(int x1=0; x1<logo_width; x1++)
				{
					RGBQUAD &s = src[x1];
					RGBQUAD &d = dst[x1];

					BYTE a = src[x1].rgbReserved * transparancy;
					BYTE ma = 255-a;
					d.rgbBlue = s.rgbBlue * a / 255 + d.rgbBlue * ma / 255;
					d.rgbGreen = s.rgbGreen * a / 255 + d.rgbGreen * ma / 255;
					d.rgbRed = s.rgbRed * a / 255 + d.rgbRed * ma / 255;
					d.rgbReserved = s.rgbReserved * a / 255 + d.rgbReserved * ma / 255;

				}
			}
		}
		free(logo);

		fprintf(stderr, "Saving to file %s...", W2A(bmp));
		HRESULT hr = save_bitmap(data, bmp, twidth, theight);
		if (FAILED(hr))
			swprintf(msg, L"Failed Saving to file %s", bmp);
		else
			fprintf(stderr, "OK\n");


		free(data);


		return S_OK;
	}

	catch(AvisynthError err) 
	{
		strcpy(tmp, err.msg);
	}

	wcscpy(msg, A2W(tmp));
	return E_FAIL;
}



HRESULT save_bitmap(DWORD *data, const wchar_t *filename, int width, int height) 
{

	FILE *pFile = _wfopen(filename, L"wb");
	if(pFile == NULL)
		return E_FAIL;

	BITMAPINFOHEADER BMIH;
	memset(&BMIH, 0, sizeof(BMIH));
	BMIH.biSize = sizeof(BITMAPINFOHEADER);
	BMIH.biBitCount = 32;
	BMIH.biPlanes = 1;
	BMIH.biCompression = BI_RGB;
	BMIH.biWidth = width;
	BMIH.biHeight = height;
	BMIH.biSizeImage = ((((BMIH.biWidth * BMIH.biBitCount) 
		+ 31) & ~31) >> 3) * BMIH.biHeight;

	BITMAPFILEHEADER bmfh;
	int nBitsOffset = sizeof(BITMAPFILEHEADER) + BMIH.biSize; 
	LONG lImageSize = BMIH.biSizeImage;
	LONG lFileSize = nBitsOffset + lImageSize;
	bmfh.bfType = 'B'+('M'<<8);
	bmfh.bfOffBits = nBitsOffset;
	bmfh.bfSize = lFileSize;
	bmfh.bfReserved1 = bmfh.bfReserved2 = 0;
	//Write the bitmap file header

	UINT nWrittenFileHeaderSize = fwrite(&bmfh, 1, 
		sizeof(BITMAPFILEHEADER), pFile);
	//And then the bitmap info header

	UINT nWrittenInfoHeaderSize = fwrite(&BMIH, 
		1, sizeof(BITMAPINFOHEADER), pFile);
	//Finally, write the image data itself 

	//-- the data represents our drawing

	UINT nWrittenDIBDataSize = 
		fwrite(data, 1, lImageSize, pFile);

	fclose(pFile);

	return S_OK;
}


bool open_file_dlg(wchar_t *pathname, HWND hDlg, bool do_open /* = false*/, wchar_t *filter/* = NULL*/)
{
	static wchar_t *default_filter = 
		L"Video files\0"
		L"*.mp4;*.mkv;*.avi;*.rmvb;*.wmv;*.avs;*.ts;*.m2ts;*.ssif;*.mpls;*.3dv;*.e3d\0"
		L"All Files\0*.*\0"
		L"\0";

	if (filter == NULL) filter = default_filter;
	wchar_t strFileName[MAX_PATH] = L"";
	wchar_t strPath[MAX_PATH] = L"";

	wcsncpy(strFileName, pathname, MAX_PATH);
	wcsncpy(strPath, pathname, MAX_PATH);
	for(int i=(int)wcslen(strPath)-2; i>=0; i--)
		if (strPath[i] == L'\\')
		{
			strPath[i+1] = NULL;
			break;
		}

		OPENFILENAMEW ofn = { sizeof(OPENFILENAMEW), hDlg , NULL,
			filter, NULL,
			0, 1, strFileName, MAX_PATH, NULL, 0, strPath,
			(L"Open File"),
			do_open ? OFN_FILEMUSTEXIST|OFN_HIDEREADONLY|OFN_ENABLESIZING : OFN_OVERWRITEPROMPT | OFN_HIDEREADONLY, 0, 0,
			L".mp4", 0, NULL, NULL };

		int o = do_open ? GetOpenFileNameW( &ofn ) : GetSaveFileName( &ofn );
		if (o)
		{
			wcsncpy(pathname, strFileName, MAX_PATH);
			return true;
		}

		return false;
}