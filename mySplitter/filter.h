// This file is adapted from the source code generated by DSWizard 
#pragma once

#include <atlbase.h>
#include <dshow.h>
#include <dvdmedia.h>
#include <initguid.h>


// {4CA1992C-10E9-4263-B616-C03281E76282}
DEFINE_GUID(CLSID_YV12StereoMixer, 
			0x4ca1992c, 0x10e9, 0x4263, 0xb6, 0x16, 0xc0, 0x32, 0x81, 0xe7, 0x62, 0x82);

// {C5930854-7F9D-458b-8A84-28C6007D447A}
DEFINE_GUID(CLSID_YV12MonoMixer, 
			0xc5930854, 0x7f9d, 0x458b, 0x8a, 0x84, 0x28, 0xc6, 0x0, 0x7d, 0x44, 0x7a);

// {D50F5B87-538B-4ee9-A18B-33783DA63CF1}
DEFINE_GUID(CLSID_DWindowMono, 
			0xd50f5b87, 0x538b, 0x4ee9, 0xa1, 0x8b, 0x33, 0x78, 0x3d, 0xa6, 0x3c, 0xf1);

// {25EAAFCB-DD72-44ce-A4A0-F73E7B065287}
DEFINE_GUID(CLSID_DWindowStereo, 
			0x25eaafcb, 0xdd72, 0x44ce, 0xa4, 0xa0, 0xf7, 0x3e, 0x7b, 0x6, 0x52, 0x87);

// {65819806-D5AA-4c43-9D31-93F4F9F641FF}
DEFINE_GUID(IID_IYV12Mixer, 
			0x65819806, 0xd5aa, 0x4c43, 0x9d, 0x31, 0x93, 0xf4, 0xf9, 0xf6, 0x41, 0xff);

// {972A955C-D3CC-4955-8625-AD6081F8FCE7}
DEFINE_GUID(IID_IDWindowExtender, 
			0x972a955c, 0xd3cc, 0x4955, 0x86, 0x25, 0xad, 0x60, 0x81, 0xf8, 0xfc, 0xe7);

// {419832C4-7813-4b90-A262-12496691E82E}
DEFINE_GUID(CLSID_DWindowSSP, 
0x419832c4, 0x7813, 0x4b90, 0xa2, 0x62, 0x12, 0x49, 0x66, 0x91, 0xe8, 0x2e);


// {09571A4B-F1FE-4C60-9760-DE6D310C7C31} (COREAVC)
//DEFINE_GUID(CLSID_DWindowSSP, 
//			0x09571A4B, 0xF1FE, 0x4C60, 0x97, 0x60, 0xDE, 0x6D, 0x31, 0x0C, 0x7C, 0x31);


class DECLSPEC_UUID("65819806-D5AA-4c43-9D31-93F4F9F641FF") IYV12Mixer;
class DECLSPEC_UUID("972A955C-D3CC-4955-8625-AD6081F8FcE7") IDWindowExtender;

class IDWindowFilterCB
{
public:
	virtual HRESULT SampleCB(REFERENCE_TIME TimeStart, REFERENCE_TIME TimeEnd, IMediaSample *pIn) = 0;
};


// auto cut mode:
// 0-1.2125			top-bottom
// 1.2125 - 2.425	normal(no cut)
// 2.425+			left-right
#define DWindowFilter_CUT_MODE_AUTO 0		// for 1 or 2 only
#define DWindowFilter_CUT_MODE_LEFT_RIGHT 1
#define DWindowFilter_CUT_MODE_TOP_BOTTOM 2
#define DWindowFilter_CUT_MODE_PD10 3

#define DWindowFilter_EXTEND_NONE 0
#define DWindowFilter_EXTEND_43 1
#define DWindowFilter_EXTEND_54 2
#define DWindowFilter_EXTEND_169 3
#define DWindowFilter_EXTEND_1610 4
#define DWindowFilter_EXTEND_CUSTOM(x,y) (5+( (x&0xff) | (y&0xff)<<8))		// 0x6 - 0x10004
#define DWindowFilter_EXTEND_CUSTOM_DECIMAL(aspect) (0xf00000 | ((int)(aspect*100000)&0xfffff) )
														// 20-bit fix-point decimal, "11.11111" = "111111111"
#define DWindowFilter_EXTEND_TO(y) (0xf0000 + y)	// 0x0fxxxx, xxxx = 16bit integer
#define DWindowFilter_CUT_MODE_LEFT_RIGHT_HALF 0x10005
#define DWindowFilter_CUT_MODE_TOP_BOTTOM_HALF 0x10006

class IYV12Mixer : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE SetCallback(IDWindowFilterCB * cb) = 0;
	virtual HRESULT STDMETHODCALLTYPE SetMode(int mode, int extend, int max_mask_buffer = -1) = 0;
	virtual HRESULT STDMETHODCALLTYPE SetColor(DWORD color) = 0;									// Mask颜色，下一帧生效
	virtual HRESULT STDMETHODCALLTYPE Revert() = 0;													// 左右交换，下一帧生效
	virtual HRESULT STDMETHODCALLTYPE GetLetterboxHeight(int *max_delta) = 0;						// 获取黑边总高度
	virtual HRESULT STDMETHODCALLTYPE SetLetterbox(int delta) = 0;									// 设定上黑边比下黑边宽多少，可负，下一帧生效
	virtual HRESULT STDMETHODCALLTYPE SetMask(unsigned char *mask,									//
									int width, int height,											//
									int left, int top) = 0;											// 单侧，另一侧自动复制
	virtual HRESULT STDMETHODCALLTYPE SetMaskPos(int left, int top,									// 位置也是以单侧为参考系，颜色为AYUV（0-255）空间
									int offset) = 0;												// offset为右眼-左眼，可正可负
};

class IDWindowExtender : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE SetCallback(IDWindowFilterCB * cb) = 0;
	virtual HRESULT STDMETHODCALLTYPE SetMode(int mode, int extend) = 0;
	virtual HRESULT STDMETHODCALLTYPE GetLetterboxHeight(int *max_delta) = 0;
	virtual HRESULT STDMETHODCALLTYPE SetLetterbox(int delta) = 0;						// delta = top - bottom
};